package main

import (
	"fmt"
	"flag"
	"strings"
	"os"
	"regexp"
	"strconv"
	"bufio"
)

var logFile    = flag.String("logfile","access.log","the log file you want to analyse")
var smallPack  = flag.Int64("s",2048,"the limitation to  the smallest packet")
var packFilter = flag.String("filter","","to filter by the file format, the User or the channel by used")

func main() {
	flag.Parse()
	f, err := os.Open(*logFile)
	ErrLog(err)
	filCount, total, averate, avertt := AnalyzeLog(f)
	fmt.Printf("Total lines : %d\nMatch lines %d\nAvg download speed: %.3fMb/s\nAvg RTT %d\n",
				total,filCount,averate,avertt)
}

func ErrLog(err error) {
	if err !=nil {
        fmt.Fprintf(os.Stderr,"log_anaylze: %v\n",err)
        os.Exit(1);
    }
}

func AnalyzeLog(data *os.File) (int, int, float64, int64) {
	var count,total int
	var aveRttSum int64 
	var aveRateSum float64
	input := bufio.NewScanner(data)
    for input.Scan() {
			match,err := regexp.MatchString(*packFilter, input.Text())
			var tmp = strings.Split(input.Text(),"\" \"")
			ErrLog(err)
			if match && len(tmp) > 22 {
				byteSent,err := strconv.ParseInt(tmp[11],10,32)
				retime,err := strconv.ParseFloat(tmp[12],64)
				tcpRtt,err := strconv.ParseInt(tmp[22],10,32)
			ErrLog(err)
				if byteSent > *smallPack {
					aveRateSum += Calculate(byteSent,retime,tcpRtt)
//					fmt.Printf("%d\t %.5f\t %d\n",byteSent,retime,tcpRtt)
//					fmt.Printf("%.7f %.7f\n",aveRateSum,Calculate(byteSent,retime,tcpRtt))
					aveRttSum += tcpRtt
					count++
				}
			}
        total++
    }
	if count == 0 {
		return count,total,0.0,0
	}else {
		return count,total,aveRateSum/float64(count),aveRttSum/int64(count)
	}
}

func Calculate(b int64, r float64, t int64) float64 {
	if r+float64(t) == 0.0 && r == 0 {
		return 0.0
	}
	floatT := float64(t)/1000/1000
	return float64(b)/(r+floatT)*8/1000/1000
}
